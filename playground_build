#!/usr/bin/env python3

import argparse
import sys
import subprocess
import signal
import datetime
import requests
import json
import os

from dotenv import load_dotenv

load_dotenv()

composeArray = ["docker", "compose"]

def docker(container, id, nocache=False, dds=False):
    cmd = ["docker","build"]
    container = container[0]
    container_id = id[0]

    if container == "docker" or container == "all":
        name="chaos"
        distro=os.getenv("TEST_DISTRO")
        start_image=f"ros:{distro}"

        auto = cmd.copy()
        if nocache:
            auto.extend(["--no-cache"])
        
        auto.extend(["-f", "docker/Dockerfile", "-t", "{}".format(container_id)])

        auto.extend(["--build-arg","NAME={}".format(name),"--build-arg","START_IMAGE={}".format(start_image), "--build-arg", "ROS_DISTRO={}".format(distro), "--build-arg", "USER_UID={}".format(os.getuid())])

        auto.extend(["docker/"])

        subprocess.call(auto)
    
def ros():
    cmd = "docker compose -f docker-compose.yml"
    cmd += " run --no-deps --entrypoint /build.sh playground"

    print(cmd)
    p = subprocess.call(cmd, shell=True)
    # p = subprocess.call("docker compose -p SITL1 run --no-deps --entrypoint '' controller bash -c 'cd /ros_ws && colcon build'", shell=True)

        

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="<<< BACON >>>"
    )

    subparsers = parser.add_subparsers(dest="subparser")

    # DOCKER
    docker_parser = subparsers.add_parser(
        "docker", description="Build docker images"
    )
    
    docker_parser.add_argument(
        "-c",
        "--container",
        nargs=1,
        type=str,
        default=['all'],
        help="Container to build. Default all",
    )

    docker_parser.add_argument(
        "-i",
        "--id",
        nargs=1,
        type=str,
        default=['test1'],
        help="Container Name"
    )

    docker_parser.add_argument(
        "-n",
        "--nocache",        
        help="Do not use the cache for the build",
        action="store_true"
    )

    # ROS
    ros_parser = subparsers.add_parser(
        "ros", description="Build ros workspace"
    )

    # ros_parser = subparsers.add_parser(
    #     "-i",
    #     "--id",
    #     nargs=1,
    #     type=str,
    #     default=["python_playgroun"]
    #     help="ID of package to build"

    # )

    # show help if no commands are included
    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    # parse args and dispatch appropriate functions
    kwargs = vars(parser.parse_args())
    print(kwargs)
    globals()[kwargs.pop("subparser")](**kwargs)

